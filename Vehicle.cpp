#include "Vehicle.h"

Vehicle::Vehicle()
{
	type = ""; 
	name = "";
	vin = "";
	year = "";

	passed = 0;
	failed = 0;
	processed = 0;
	completed = 0;
}

void Vehicle::Gen_Type(int *t)
{
	// Create an array storing the possibilities for car types (with added spacing for equal lengths so output in the file and compiler terminal is consistent)

	string types[4] = { 
		"Car         ", 
		"Truck       ", 
		"Van         ", 
		"SUV         " 
	};

	// Randomly assign the vehicle's type to one of the four in the array

	*t = rand() % 4;

	type = types[*t];
}

void Vehicle::Gen_Name(int t, int *n)
{
	// Create an array storing the possibilities for car names

	string names[4][4] = {
	{"Corolla       ", "Tacoma Access ", "Sienna        ", "Highlander    "},
	{"Camry         ", "Tacoma Double ", "Sienna        ", "Sequoia       "},
	{"Prius         ", "Tundra Double ", "Sienna        ", "Venza         "},
	{"Supra         ", "Tundra Crewmax", "Sienna        ", "4Runner       "}
	};

	// Randomly assign the vehicle's name to one of the 16 in the array, limited to the vehicle's type generated from the previous member function 
	// ex. if t == 0 (Car), only vehicle names from column 0 can be chosen

	*n = rand() % 4;

	name = names[*n][t];
}

void Vehicle::Gen_VIN(int t, int n)
{	
	// The VIN number is generated by choosing a random character from each one of 12 arrays

	// Country

	string countries[13] = { 
		"1", "2", "3", "4", "5", "6", "8", 
		"9", "J", "S", "M", "K", "V" 
	};

	string country = countries[rand() % 13];

	// Manufacturer

	string manufacturers[2] = { "N", "T" };
	string manufacturer = manufacturers[rand() % 2];

	// Vehicle type

	string vec_type;
	string car[8] = { "D", "G", "K", "X", "1", "2", "7", "N" };
	string truck[5] = { "A", "B", "F", "M", "4" };
	string vanSUV[3] = { "E", "L", "3" };

	// Choosing an array to sort through based on the vehicle's type
	// ex. if t == 0, the program can only choose characters in the "car" array

	if (t == 0)
		vec_type = car[rand() % 8];

	else if (t == 1)
		vec_type = truck[rand() % 5];

	else
		vec_type = vanSUV[rand() % 3];

	// Body/chassis type

	string body_type;
	string body_car[3] = { "A", "B", "C" };
	string body_truck[13] = { 
		"B", "D" "E", "G", "H", "K", "L", 
		"N", "P", "S", "T", "W", "Z" 
	};
	string body_vanSUV[2] = { "M", "Y" };

	if (t == 0)
		vec_type = body_car[rand() % 3];

	else if (t == 1)
		vec_type = body_truck[rand() % 13];

	else
		vec_type = body_vanSUV[rand() % 2];

	// Engine type

	string engines[19] = { 
		"A", "B", "D", "E", "F", "G", "H", "J", "K", "L", 
		"M", "N", "P", "R", "S", "T", "U", "V", "Y" 
	};

	string engine_type = engines[rand() % 19];

	// Car series

	string series_types[5] = { "A", "B", "C", "D", "E" };
	string series = series_types[rand() % 5];

	// Safety features

	string safety_features[9] = { "0", "1", "2", "3", "6", "7", "8", "D", "F" };
	string safety = safety_features[rand() % 9];

	// Car model (chosen based on vehicle type and name)

	string model;

	if (t == 0)
	{
		if (n == 0)
			model = "E";

		else if (n == 1)
			model = "K";

		else if (n == 2)
			model = "U";

		else if (n == 3)
			model = "A";
	}

	if (t == 1)
	{
		if (n == 0 || n == 1)
			model = "N";

		else if (n == 2 || n == 3)
			model = "1";
	}

	if (t == 2)
		model = "C";

	if (t == 3)
	{
		if (n == 0 || n == 1)
			model = "A";

		else if (n == 2)
			model = "V";

		else if (n == 3)
			model = "R";
	}

	// Check digits

	string check_digit;
	string digits[9] = { "1", "2", "3", "4", "5", "6", "7", "8", "9" };
	check_digit = digits[rand() % 9];

	// Year (set to "N" for 2023 for all vehicles)

	string year = "N";

	// Factory produced

	string factories[22] = { 
		"0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "A", 
		"C", "E", "K", "M", "N", "R", "S", "U", "W", "X", "Z"
	};

	string factory = factories[rand() % 22];

	// Production number (a random six-digit number)

	int seq_num = rand() % (999999 - 100000 + 1) + 100000;

	string sseq_num = to_string(seq_num);

	// Concatenate all of the characters to the "vin" member variable

	vin += country + manufacturer + vec_type + body_type
		+ engine_type + engine_type + series + safety + 
		model + check_digit + year + factory + sseq_num;
}

// Placeholder specification for the virtual function "Gen_Part()" (only to be used in derived classes)

void Vehicle::Gen_Part(int* t) {};

void Vehicle::Gen_Status(int ty, int processed, int completed)
{
	// The total quantity of a part is the sum of its processed and completed quantities

	int total = processed + completed;

	// Create an array storing the total number of parts required to yield a complete vehicle (Car, Truck, Van, SUV)

	const int complete[4] = { 11, 28, 17, 19 };

	// Updating the status of the vehicle

	if (total == complete[ty])
		status = "Completed ";

	else if (total < complete[ty])
		status = "In-process";

	else if (total == 0)
		status = "Queued    ";
}

void Vehicle::Gen_Waste(int failed)
{
	// If the number of parts failed is greater than zero, waste is present

	if (failed > 0)
		waste = "Yes";

	else
		waste = "No";
}

ostream& operator<<(ostream& os, Vehicle& v)
 {
	// Output all member variables (whose values are generated only by using member functions of the Vehicle base class)

	os << v.Get_Type() << setw(16) << v.Get_Name() << setw(6) << v.Get_Year()
		<< setw(19) << v.Get_VIN() << setw(3);

	return os; 
}
